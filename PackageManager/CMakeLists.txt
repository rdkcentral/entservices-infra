project(PackageManager)
set(PLUGIN_NAME ${PROJECT_NAME}RDKEMS)
# When existing/old PackageManager plugin is removed, remove "RDKEMS" from the PLUGIN_NAME
set(MODULE_NAME ${NAMESPACE}${PLUGIN_NAME})
message("Setup ${MODULE_NAME}")

# XXX: ../cmake/FindCurl.cmake is bad
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/;${CMAKE_MODULE_PATH}")
message("CMAKE_MODULE_PATH=${CMAKE_MODULE_PATH}")

if (LIB_PACKAGE)
    message("LIB_PACKAGE=${LIB_PACKAGE}")
    add_compile_options ( -DUSE_LIBPACKAGE )
    set(LIB_PACKAGE_LIBRARY "${CMAKE_INSTALL_PREFIX}/lib/libPackage.so")
endif()

#include_directories ( ../../install/include/WPEFramework )

find_package(${NAMESPACE}Plugins REQUIRED)
find_package(${NAMESPACE}Definitions REQUIRED)
find_package( Curl REQUIRED)
if (CURL_FOUND)
    message("Yay, found curl inc=${CURL_INCLUDE_DIRS} lib=${CURL_LIBRARY}")
endif()

add_library(${MODULE_NAME} SHARED
    PackageManager.cpp
    PackageManagerImplementation.cpp
    Module.cpp
    HttpClient.cpp)

if(BUILD_REFERENCE)
    add_definitions(-DBUILD_REFERENCE=${BUILD_REFERENCE})
endif()


target_include_directories(${MODULE_NAME} PRIVATE
    ../helpers
    ${CURL_INCLUDE_DIR}
    ${CMAKE_SYSROOT}${CMAKE_INSTALL_PREFIX}/include/${NAMESPACE}/interfaces
    )

target_link_libraries(${MODULE_NAME} PRIVATE
    ${NAMESPACE}Definitions::${NAMESPACE}Definitions
    ${NAMESPACE}Plugins::${NAMESPACE}Plugins
    ${CURL_LIBRARY}
    ${LIB_PACKAGE_LIBRARY}
    )

install(TARGETS ${MODULE_NAME}
    DESTINATION lib/${STORAGE_DIRECTORY}/plugins)

set(PLUGIN_PACKAGEMANAGER_MODE "Local" CACHE STRING "Controls if the plugin should run in its own process, in process or remote")
set(PLUGIN_PACKAGEMANAGER_AUTOSTART "false" CACHE STRING "Deactivated PackageManager plugin")
#write_config()
write_config(INSTALL_NAME ${PLUGIN_NAME}.json)
